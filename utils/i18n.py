from __future__ import annotations
from typing import Dict, Any

locales: Dict[str, Dict[str, str]] = {
    "ru": {
        "start_button": "–°–¢–ê–†–¢",
        "start_chat": "–ü–µ—Ä–µ–π—Ç–∏ –≤ —á–∞—Ç",
        "contact_owner": "–°–≤—è–∑–∞—Ç—å—Å—è —Å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º",
        "contact_action": "–°–≤—è–∑–∞—Ç—å—Å—è",
        "send_my_location": "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ—é –ª–æ–∫–∞—Ü–∏—é",
        "request_pet_location": "–£–∑–Ω–∞—Ç—å –ª–æ–∫–∞—Ü–∏—é –ø–∏—Ç–æ–º—Ü–∞",
        "show_location": "–ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–∫–∞—Ü–∏—é",
        "arrive_10": "–ü—Ä–∏–±—É–¥—É –≤ —Ç–µ—á–µ–Ω–∏–µ 10 –º–∏–Ω—É—Ç",
        "arrive_20": "–ü—Ä–∏–±—É–¥—É –≤ —Ç–µ—á–µ–Ω–∏–µ 20 –º–∏–Ω—É—Ç",
        "arrive_30": "–ü—Ä–∏–±—É–¥—É –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –º–∏–Ω—É—Ç",
        "share_location": "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –ª–æ–∫–∞—Ü–∏–µ–π",
        "cannot_arrive": "–ù–µ –º–æ–≥—É –ø—Ä–∏–µ—Ö–∞—Ç—å",
        "accept_chat": "–ü—Ä–∏–Ω–∏–º–∞—é",
        "sound_password": "–ó–≤—É–∫–æ–≤–æ–π –ø–∞—Ä–æ–ª—å",
        "mission_success": "–ú–∏—Å—Å–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!",
        "something_wrong": "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫? –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é –ø–∏—Ç–æ–º—Ü–∞",
        "pet_info_message": (
            "–≠—Ç–æ —Å—Ç—Ä–∞–Ω–∏—á–∫–∞ –ø–∏—Ç–æ–º—Ü–∞: {pet_name}. –í–æ–∑—Ä–∞—Å—Ç –ø–∏—Ç–æ–º—Ü–∞: {age} –ª–µ—Ç.\n\n"
            "–ï—Å–ª–∏ –≤—ã —á–∏—Ç–∞–µ—Ç–µ –º–æ—é —Å—Ç—Ä–∞–Ω–∏—Ü—É, –∑–Ω–∞—á–∏—Ç —è –ø–æ—Ç–µ—Ä—è–ª—Å—è. –Ø –æ—á–µ–Ω—å —Ö–æ—á—É –¥–æ–º–æ–π, –∫ —Å–≤–æ–µ–º—É —Ö–æ–∑—è–∏–Ω—É. "
            "–û–Ω –æ—á–µ–Ω—å –ª—é–±–∏—Ç –º–µ–Ω—è –∏ —Å–∫—É—á–∞–µ—Ç.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∏–º –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ –∏ –ø–æ–º–æ–≥–∏—Ç–µ –º–Ω–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –¥–æ–º–æ–π."
        ),
        "owner_alerted": "–í–ª–∞–¥–µ–ª–µ—Ü –æ–ø–æ–≤–µ—â—ë–Ω, —Å–µ–π—á–∞—Å –æ–Ω –æ—Ç—Ä–µ–∞–≥–∏—Ä—É–µ—Ç.",
        "owner_found_pet": "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –Ω–∞—à—ë–ª –≤–∞—à–µ–≥–æ –ø–∏—Ç–æ–º—Ü–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å–æ –º–Ω–æ–π, –∏ —è —Å —Ä–∞–¥–æ—Å—Ç—å—é –µ–≥–æ –≤–∞–º –≤–µ—Ä–Ω—É.",
        "location_instruction": "–ó–∞–ø—Ä–æ—Å–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –∏–ª–∏ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–µ–π, —á—Ç–æ–±—ã –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è",
        "owner_location_sent": (
            "–õ–æ–∫–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞, –Ω–µ –æ—Ç—Ö–æ–¥–∏—Ç–µ –¥–∞–ª–µ–∫–æ –æ—Ç –Ω–µ—ë –¥–æ –≤—Å—Ç—Ä–µ—á–∏ —Å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–º.\n"
            "–ö–æ–≥–¥–∞ –≤—ã –æ–∫–∞–∂–µ—Ç–µ—Å—å —Ä—è–¥–æ–º, –ø–æ–ª—É—á–∏—Ç–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ."
        ),
        "user_location_sent": (
            "–Ø —Å–µ–π—á–∞—Å –Ω–∞—Ö–æ–∂—É—Å—å –∑–¥–µ—Å—å. –ï—Å–ª–∏ –≤—ã –Ω–µ–¥–∞–ª–µ–∫–æ –∏ –≤–∞–º —É–¥–æ–±–Ω–æ, –¥–∞–≤–∞–π—Ç–µ –≤—Å—Ç—Ä–µ—Ç–∏–º—Å—è –≤ —ç—Ç–æ–π —Ç–æ—á–∫–µ.\n"
            "–ï—Å–ª–∏ –≤–∞–º —É–¥–æ–±–Ω–µ–µ, —á—Ç–æ–±—ã —è –ø—Ä–∏–±—ã–ª –∫ –≤–∞–º ‚Äî –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é –ª–æ–∫–∞—Ü–∏—é."
        ),
        "navigation_hint_owner": (
            "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–µ–∂–∏–º –Ω–∞–≤–∏–≥–∞—Ü–∏–∏, —á—Ç–æ–±—ã –æ—Ü–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è –≤ –ø—É—Ç–∏, "
            "–ø–æ—Å–ª–µ —á–µ–≥–æ —Å–æ–æ–±—â–∏—Ç–µ –≤—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è –Ω–∞—à–µ–¥—à–µ–º—É –ø–∏—Ç–æ–º—Ü–∞."
        ),
        "navigation_hint_user": (
            "–°–æ–æ–±—â–∏—Ç–µ, –∫–æ–≥–¥–∞ –≤—ã –ø—Ä–∏–±—É–¥–µ—Ç–µ. –°–æ–æ–±—â–∏–≤ –≤—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è, –≤—ã —Ç–∞–∫–∂–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ —Å–≤–æ—é –ª–æ–∫–∞—Ü–∏—é."
        ),
        "arrival_owner_10": "–ü—Ä–∏–±—É–¥—É –≤ —Ç–µ—á–µ–Ω–∏–µ 10 –º–∏–Ω—É—Ç, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –º–µ–Ω—è –≤ —Ç–æ—á–∫–µ –≤–∞—à–µ–π –ª–æ–∫–∞—Ü–∏–∏.",
        "arrival_owner_20": "–ü—Ä–∏–±—É–¥—É –≤ —Ç–µ—á–µ–Ω–∏–µ 20 –º–∏–Ω—É—Ç, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –º–µ–Ω—è –≤ —Ç–æ—á–∫–µ –≤–∞—à–µ–π –ª–æ–∫–∞—Ü–∏–∏.",
        "arrival_owner_30": "–ü—Ä–∏–±—É–¥—É –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –º–∏–Ω—É—Ç, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –º–µ–Ω—è –≤ —Ç–æ—á–∫–µ –≤–∞—à–µ–π –ª–æ–∫–∞—Ü–∏–∏.",
        "arrival_timer_warning": (
            "–í—ã –¥–æ–ª–∂–Ω—ã –ø—Ä–∏–±—ã—Ç—å –∫ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ç–æ—á–∫–µ –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –≤—Ä–µ–º–µ–Ω–∏.\n"
            "–ï—Å–ª–∏ –≤—ã –æ–ø–∞–∑–¥—ã–≤–∞–µ—Ç–µ, –æ–±–Ω–æ–≤–∏—Ç–µ –≤—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è —á–µ—Ä–µ–∑ —ç—Ç–æ –º–µ–Ω—é."
        ),
        "cannot_arrive_waiting": "–ù–µ –º–æ–≥—É –ø—Ä–∏–µ—Ö–∞—Ç—å: –Ω–∞—Ö–æ–∂—É—Å—å –≤ —ç—Ç–æ–π –ª–æ–∫–∞—Ü–∏–∏ –∏ –±—É–¥—É –∂–¥–∞—Ç—å –≤–∞—Å –∑–¥–µ—Å—å.",
        "location_shared_response": (
            "–õ–æ–∫–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞, –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞. –ù–µ –æ—Ç—Ö–æ–¥–∏—Ç–µ –¥–∞–ª–µ–∫–æ ‚Äî –ø–æ–ª—É—á–∏—Ç–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –ø—Ä–∏ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–∏."
        ),
        "navigation_to_user": (
            "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–µ–∂–∏–º –Ω–∞–≤–∏–≥–∞—Ü–∏–∏, —á—Ç–æ–±—ã –æ—Ü–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è –≤ –ø—É—Ç–∏, "
            "–ø–æ—Å–ª–µ —á–µ–≥–æ —Å–æ–æ–±—â–∏—Ç–µ –≤—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è –Ω–∞—à–µ–¥—à–µ–º—É –ø–∏—Ç–æ–º—Ü–∞."
        ),
        "final_meet_instruction": (
            "–°–æ–æ–±—â–∏—Ç–µ, –∫–æ–≥–¥–∞ –≤—ã –ø—Ä–∏–±—É–¥–µ—Ç–µ, –∏–ª–∏ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –≤ —á–∞—Ç –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è."
        ),
        "language_warning": "–í–Ω–∏–º–∞–Ω–∏–µ! –Ø–∑—ã–∫ –æ–±—â–µ–Ω–∏—è —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –æ—Ç –≤–∞—à–µ–≥–æ.",
        "location_requested": "–õ–æ–∫–∞—Ü–∏—è –∑–∞–ø—Ä–æ—à–µ–Ω–∞, –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.",
        "you_are_close": "–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å —Ä—è–¥–æ–º! –í–∫–ª—é—á–∏—Ç–µ –∑–≤—É–∫–æ–≤–æ–π –ø–∞—Ä–æ–ª—å, –æ–≥–ª—è–Ω–∏—Ç–µ—Å—å –∏ –Ω–∞–π–¥–∏—Ç–µ –¥—Ä—É–≥ –¥—Ä—É–≥–∞.",
        "play_sound_caption": "–ü—Ä–æ–∏–≥—Ä—ã–≤–∞–µ—Ç—Å—è –∑–≤—É–∫–æ–≤–æ–π –ø–∞—Ä–æ–ª—å... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–≥–ª—è–Ω–∏—Ç–µ—Å—å –≤–æ–∫—Ä—É–≥!",
        "invite_text": "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ {invite_link}, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ {group_name}.",
        "live_location_howto": (
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—é –≤–∞—à–µ–π live-–ª–æ–∫–∞—Ü–∏–∏ –±–æ—Ç—É.\n\n"
            "üìé ‚Üí ¬´–ì–µ–æ–ø–æ–∑–∏—Ü–∏—è¬ª ‚Üí ¬´–¢—Ä–∞–Ω—Å–ª—è—Ü–∏—è –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏¬ª ‚Üí "
            "–≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ ‚Üí –æ—Ç–ø—Ä–∞–≤–∏—Ç—å."
        ),
    },
    "en": {
        "start_button": "START",
        "start_chat": "Go to chat",
        "contact_owner": "Contact the owner",
        "contact_action": "Contact",
        "send_my_location": "Send my location",
        "request_pet_location": "Request pet location",
        "show_location": "Show location",
        "arrive_10": "Arrive within 10 minutes",
        "arrive_20": "Arrive within 20 minutes",
        "arrive_30": "Arrive within 30 minutes",
        "share_location": "Share location",
        "cannot_arrive": "Cannot arrive",
        "accept_chat": "Accept",
        "sound_password": "Sound password",
        "mission_success": "Mission accomplished!",
        "something_wrong": "Something went wrong? Check the pet's location",
        "pet_info_message": (
            "This is the page of the pet: {pet_name}. The pet is {age} years old.\n\n"
            "If you are reading my page, it means I am lost. I really want to go home to my owner. "
            "He loves me very much and misses me.\n"
            "Please contact him using the button below and help me return home."
        ),
        "owner_alerted": "The owner has been alerted, he will respond shortly.",
        "owner_found_pet": "Hello! I found your pet, please contact me and I will gladly return him to you.",
        "location_instruction": "Request the location of the other person or share yours to meet",
        "owner_location_sent": (
            "Location sent, do not go far from it until you meet the person.\n"
            "When you are close, you will receive a notification."
        ),
        "user_location_sent": (
            "I am here now. If you are nearby and it is convenient, let's meet at this point.\n"
            "If it is more convenient for you that I come to you ‚Äî please send your location."
        ),
        "navigation_hint_owner": (
            "Switch to navigation mode to estimate travel time, "
            "then inform the pet finder of your arrival time."
        ),
        "navigation_hint_user": (
            "Inform when you will arrive. By informing the arrival time, you also send your location."
        ),
        "arrival_owner_10": "I will arrive within 10 minutes, please wait for me at your location point.",
        "arrival_owner_20": "I will arrive within 20 minutes, please wait for me at your location point.",
        "arrival_owner_30": "I will arrive within 30 minutes, please wait for me at your location point.",
        "arrival_timer_warning": (
            "You must arrive at the specified point within the chosen time frame.\n"
            "If you are late, update your arrival time through this menu."
        ),
        "cannot_arrive_waiting": "Cannot arrive: I am at this location and will wait for you here.",
        "location_shared_response": (
            "Location sent, please wait for a response. Do not go far ‚Äî you will be notified when close."
        ),
        "navigation_to_user": (
            "Switch to navigation mode to estimate travel time, "
            "then inform the pet finder of your arrival time."
        ),
        "final_meet_instruction": (
            "Inform when you will arrive or invite the other person to chat to discuss."
        ),
        "language_warning": "Attention! The other person's communication language may differ from yours.",
        "location_requested": "Location requested, please wait for a response.",
        "you_are_close": "You are nearby! Turn on the sound password, look around and find each other.",
        "play_sound_caption": "The sound password is playing... Please look around!",
        "invite_text": "Follow the link {invite_link} to continue the conversation in the group {group_name}.",
        "live_location_howto": (
            "Please share your live location with the bot.\n\n"
            "üìé ‚Üí ‚ÄúLocation‚Äù ‚Üí ‚ÄúShare live location‚Äù ‚Üí choose duration ‚Üí send."
        ),
    },
}

DEFAULT_LANG = "en"

def normalize_lang(lang: str | None) -> str:
    if not lang:
        return DEFAULT_LANG
    base = lang.split("-")[0].lower()
    return base if base in locales else DEFAULT_LANG

class I18n:
    def __init__(self, data: Dict[str, Dict[str, str]], default: str = DEFAULT_LANG):
        self.data = data
        self.default = default

    def t(self, lang: str, key: str, **kwargs: Any) -> str:
        code = normalize_lang(lang)
        bucket = self.data.get(code, {})
        s = bucket.get(key) or self.data[self.default].get(key) or key
        try:
            return s.format(**kwargs)
        except Exception:
            return s

I18N = I18n(locales, DEFAULT_LANG)
